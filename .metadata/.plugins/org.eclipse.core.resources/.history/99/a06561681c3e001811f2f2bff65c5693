package com.stackroute.controller;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.stackroute.model.RecommendUrl;
import com.stackroute.model.UserInput;

@CrossOrigin
@RestController
@RequestMapping(value = "/api/v1")
public class Controller {
	
	@Autowired
	UserInput userInput;
	
	
	@GetMapping(value = "/user", produces = "application/json")
	public ResponseEntity<ArrayList<RecommendUrl>> addUser(@RequestParam("domain") final String domain,
			@RequestParam("concept") final String concept, @RequestParam("intent") final String intent) {
		userInput.setConcept(concept);
		userInput.setDomain(domain);
		userInput.setIntent(intent);
//		String Query = "Match(n:url)-[x:" + userInput.getIntent() + "]->(c:concept{name:\"" + userInput.getConcept()
//		+ "\""
//		+ "})return n.titleUrl as titleUrl,n.metaUrl as metaUrl,n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator, x.confidenceScore as confidenceScore";
		
		String Query1="Match(n:url)-[x:"+userInput.getIntent()+"]->(m:concept)-[:SubConceptOf]->(c:concept{name:\""+userInput.getConcept()
		+ "\""
		+"}),(d:Domain{name:\""+userInput.getDomain()
		+ "\""
		+"})return n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator,x.name as intentRecommend ,x.confidenceScore as confidenceScore,m.name as conceptRecommend,d.name as domainRecommend";
		
		String Query2="Match(n:url)-[x:"+userInput.getIntent()+"]->(m:concept)-[:Related]->(c:concept{name:\""+userInput.getConcept()
		+ "\""
		+"}),(d:Domain{name:\""+userInput.getDomain()
		+ "\""
		+"})return n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator,x.name as intentRecommend ,x.confidenceScore as confidenceScore,m.name as conceptRecommend,d.name as domainRecommend";
		if (userInput.getIntent()=="Beginner"){
			String Query3 = "Match(n:url)-[x:Intermediate]->(c:concept{name:\"" + userInput.getConcept()
			+ "\""
			+ "}),(d:Domain{name:\"" + userInput.getDomain()+ "\"" + "})return n.titleUrl as titleUrl,n.metaUrl as metaUrl,n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator, x.name as intentRecommend,x.confidenceScore as confidenceScore,c.name as conceptRecommend,d.name as domainRecommend";
		}else if((userInput.getIntent()=="Intermediate")){
			String Query3 = "Match(n:url)-[x:Advance]->(c:concept{name:\"" + userInput.getConcept()
			+ "\""
			+ "}),(d:Domain{name:\"" + userInput.getDomain()+ "\"" + "})return n.titleUrl as titleUrl,n.metaUrl as metaUrl,n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator, x.name as intentRecommend,x.confidenceScore as confidenceScore,c.name as conceptRecommend,d.name as domainRecommend";
		}else if((userInput.getIntent()=="Illu")){
		}
//		String Query3 =
//		final ArrayList<RecommendUrl> fetchedUrls = fetchService.fetchedUrl(Query);
//System.out.println(fetchedUrls.toString());
//		return new ResponseEntity<ArrayList<FetchUrl>>(fetchedUrls, HttpStatus.CREATED);
		return null;

	}
	
	
	

}
