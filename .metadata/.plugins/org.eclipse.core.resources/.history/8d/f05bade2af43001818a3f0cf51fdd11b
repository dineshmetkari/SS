package com.stackroute.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.redisson.Redisson;
import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Service;

import com.stackroute.model.ApiTermModel;
import com.stackroute.redisson.IntentModel;
import com.stackroute.redisson.Neo4jIntentModel;



@Service
public class SynonymPopulation {

	@Autowired
	WordApiService wordApiService;

	public  void synonymMatcher() implements ApplicationListener<ContextRefreshedEvent>{

		Config config = new Config();
		config.useSingleServer().setAddress("redis://localhost:6379");
		RedissonClient redisson = Redisson.create(config);
		RBucket<Neo4jIntentModel> bucket = redisson.getBucket("intentModel");
		ArrayList<IntentModel> termList = bucket.get().getIntentList();
		Map<String,ArrayList<String>> termMap = new HashMap<>();
		ArrayList<Map<String,ArrayList<String>>> intentTermList = new ArrayList<>();
		Map<String,ArrayList<Map<String,ArrayList<String>>>> synonymMap = new HashMap<>();
		
		for(int i=0;i<termList.size();i++){
			IntentModel intentModel = termList.get(i);
			String intent=intentModel.getIntent();
			String term = intentModel.getTerm();
			ApiTermModel apiTermModel = wordApiService.ApiResults(term);
			termMap.put(apiTermModel.getWord(), apiTermModel.getSynonyms());
			if(synonymMap.containsKey(intent)){
				ArrayList<Map<String,ArrayList<String>>> tempList = synonymMap.get(intent);
				tempList.add(termMap);
				synonymMap.put(intent, tempList);
			}else{
				ArrayList<Map<String,ArrayList<String>>> tempIntentList = new ArrayList<>();
				tempIntentList.add(termMap);
				synonymMap.put(intent, tempIntentList);
			}
		}


	}
}
