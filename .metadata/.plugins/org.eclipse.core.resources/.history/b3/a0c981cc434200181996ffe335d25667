package com.stackroute.dataLoader;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.neo4j.driver.v1.AuthTokens;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.GraphDatabase;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;
import org.neo4j.driver.v1.TransactionWork;
import org.redisson.Redisson;
import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

import com.stackroute.redisson.FetchUrl;
import com.stackroute.redisson.IntentModel;
import com.stackroute.redisson.Neo4jUrlModel;

@Component
public class DataLoaderUrl implements ApplicationListener<ContextRefreshedEvent> {
	
	private Driver driver;

	@Value("${uri}")
	String uri;
	@Value("${username}")
	String user;
	@Value("${password}")
	String password;
	@Value("${redisHost}")
	String redisHost;
	
	@Autowired
	private Neo4jUrlModel neo4jUrlModel;
	
	private RBucket<Neo4jUrlModel> bucket;

	public RBucket<Neo4jUrlModel> getBucket() {
		return bucket;
	}

	public void setBucket(RBucket<Neo4jUrlModel> bucket) {
		this.bucket = bucket;
	}

	@Override
	public void onApplicationEvent(ContextRefreshedEvent event) {
		// TODO Auto-generated method stub
		System.out.println("ApplicationListener Invoked At Spring Container Startup for UrlList");
String Query1="Match(n:url)-[x:Advance]->(c:concept),(d:Domain{name:'Java'})return n.titleUrl as titleUrl,n.metaUrl as metaUrl,n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator, c.name as conceptName,x.confidenceScore as confidenceScore";
	String Query2= "Match(n:url)-[x:Illustration]->(c:concept),(d:Domain{name:'Java'})return n.titleUrl as titleUrl,n.metaUrl as metaUrl,n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator, c.name as conceptName,x.confidenceScore as confidenceScore";	
	String Query3 = "Match(n:url)-[x:Intermediate]->(c:concept),(d:Domain{name:'Java'})return n.titleUrl as titleUrl,n.metaUrl as metaUrl,n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator, c.name as conceptName,x.confidenceScore as confidenceScore";
	String Query4 = "Match(n:url)-[x:Advance]->(c:concept),(d:Domain{name:'Java'})return n.titleUrl as titleUrl,n.metaUrl as metaUrl,n.imgCount as imgCount,n.videoCount as videoCount,n.codeCount as codeCount,n.url as url,n.counterIndicator as counterIndicator, c.name as conceptName,x.confidenceScore as confidenceScore";
	
	Config config = new Config();
	config.useSingleServer().setAddress(redisHost);
	RedissonClient redisson = Redisson.create(config);
	
	bucket = redisson.getBucket("urlModel");
	ArrayList<FetchUrl> fetchListAdvance = new ArrayList<>();
	driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password));
	Session session1 = driver.session();
	String Message1 = session1.writeTransaction(new TransactionWork<String>() {
		public String execute(Transaction tx) {
			StatementResult result = tx.run(Query1);
			while (result.hasNext()) {

				Record record = result.next();
				FetchUrl fetchUrl = new FetchUrl();
				fetchUrl.setCodeCount(record.get("codeCount").asInt());
				fetchUrl.setImgCount(record.get("imgCount").asInt());
				fetchUrl.setVideoCount(record.get("videoCount").asInt());
				fetchUrl.setCounterIndicator(record.get("counterIndicator").asInt());
				fetchUrl.setConfidenceScore(record.get("confidenceScore").asDouble());
				fetchUrl.setConceptName(record.get("conceptName").asString());
				fetchUrl.setMetaUrl(record.get("metaUrl").asString());
				fetchUrl.setTitleUrl(record.get("titleUrl").asString());
				fetchUrl.setUrl(record.get("url").asString());
				fetchUrl.setIntentUrl("Advance");
				fetchListAdvance.add(fetchUrl);
		
						
			}
			
			return "Neo4j ConceptList Working";
		}
	});
	
	
	ArrayList<FetchUrl> fetchListIllustration = new ArrayList<>();
	driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password));
	Session session2 = driver.session();
	String Message2 = session1.writeTransaction(new TransactionWork<String>() {
		public String execute(Transaction tx) {
			StatementResult result = tx.run(Query2);
			while (result.hasNext()) {

				Record record = result.next();
				FetchUrl fetchUrl = new FetchUrl();
				fetchUrl.setCodeCount(record.get("codeCount").asInt());
				fetchUrl.setImgCount(record.get("imgCount").asInt());
				fetchUrl.setVideoCount(record.get("videoCount").asInt());
				fetchUrl.setCounterIndicator(record.get("counterIndicator").asInt());
				fetchUrl.setConfidenceScore(record.get("confidenceScore").asDouble());
				fetchUrl.setConceptName(record.get("conceptName").asString());
				fetchUrl.setMetaUrl(record.get("metaUrl").asString());
				fetchUrl.setTitleUrl(record.get("titleUrl").asString());
				fetchUrl.setUrl(record.get("url").asString());
				fetchUrl.setIntentUrl("Illustration");
				fetchListIllustration.add(fetchUrl);
			}
			
			return "Neo4j ConceptList Working";
		}
	});
	
	
	
	ArrayList<FetchUrl> fetchListIntermediate = new ArrayList<>();
	driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password));
	Session session3 = driver.session();
	String Message3 = session1.writeTransaction(new TransactionWork<String>() {
		public String execute(Transaction tx) {
			StatementResult result = tx.run(Query3);
			while (result.hasNext()) {

				Record record = result.next();
				FetchUrl fetchUrl = new FetchUrl();
				fetchUrl.setCodeCount(record.get("codeCount").asInt());
				fetchUrl.setImgCount(record.get("imgCount").asInt());
				fetchUrl.setVideoCount(record.get("videoCount").asInt());
				fetchUrl.setCounterIndicator(record.get("counterIndicator").asInt());
				fetchUrl.setConfidenceScore(record.get("confidenceScore").asDouble());
				fetchUrl.setConceptName(record.get("conceptName").asString());
				fetchUrl.setMetaUrl(record.get("metaUrl").asString());
				fetchUrl.setTitleUrl(record.get("titleUrl").asString());
				fetchUrl.setUrl(record.get("url").asString());
				fetchUrl.setIntentUrl("Intermediate");
				fetchListIntermediate.add(fetchUrl);
			}
			
			return "Neo4j ConceptList Working";
		}
	});
	
	
	
	ArrayList<FetchUrl> fetchListBeginner = new ArrayList<>();
	driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password));
	Session session4 = driver.session();
	String Message4 = session1.writeTransaction(new TransactionWork<String>() {
		public String execute(Transaction tx) {
			StatementResult result = tx.run(Query4);
			while (result.hasNext()) {

				Record record = result.next();
				FetchUrl fetchUrl = new FetchUrl();
				fetchUrl.setCodeCount(record.get("codeCount").asInt());
				fetchUrl.setImgCount(record.get("imgCount").asInt());
				fetchUrl.setVideoCount(record.get("videoCount").asInt());
				fetchUrl.setCounterIndicator(record.get("counterIndicator").asInt());
				fetchUrl.setConfidenceScore(record.get("confidenceScore").asDouble());
				fetchUrl.setConceptName(record.get("conceptName").asString());
				fetchUrl.setMetaUrl(record.get("metaUrl").asString());
				fetchUrl.setTitleUrl(record.get("titleUrl").asString());
				fetchUrl.setUrl(record.get("url").asString());
				fetchUrl.setIntentUrl("Beginner");
				fetchListBeginner.add(fetchUrl);
			}
			
			return "Neo4j ConceptList Working";
		}
	});
	
	Map<String,ArrayList<FetchUrl>> fetchMapAdvance = new HashMap<>();
	for(int i=0; i<fetchListAdvance.size();i++){
		FetchUrl temp = fetchListAdvance.get(i);
		String concept = fetchListAdvance.get(i).getConceptName();
		if(fetchMapAdvance.containsKey(concept)){
			ArrayList<FetchUrl> tempList = fetchMapAdvance.get(concept);
			tempList.add(temp);
			fetchMapAdvance.put(concept,tempList);
			
		}else{
			ArrayList<FetchUrl> fetchListTemp = new ArrayList<>();
			fetchListTemp.add(temp);
			fetchMapAdvance.put(concept,fetchListTemp);
			
		}
		
	}
	Map<String,ArrayList<FetchUrl>> fetchMapIllustration = new HashMap<>();
	for(int i=0; i<fetchListIllustration.size();i++){
		FetchUrl temp = fetchListIllustration.get(i);
		String concept = fetchListIllustration.get(i).getConceptName();
		if(fetchMapIllustration.containsKey(concept)){
			ArrayList<FetchUrl> tempList = fetchMapIllustration.get(concept);
			tempList.add(temp);
			fetchMapIllustration.put(concept,tempList);
			
		}else{
			ArrayList<FetchUrl> fetchListTemp = new ArrayList<>();
			fetchListTemp.add(temp);
			fetchMapIllustration.put(concept,fetchListTemp);
			
		}
		
	}
	Map<String,ArrayList<FetchUrl>> fetchMapIntermediate = new HashMap<>();
	for(int i=0; i<fetchListIntermediate.size();i++){
		FetchUrl temp = fetchListIntermediate.get(i);
		String concept = fetchListIntermediate.get(i).getConceptName();
		if(fetchMapIntermediate.containsKey(concept)){
			ArrayList<FetchUrl> tempList = fetchMapIntermediate.get(concept);
			tempList.add(temp);
			fetchMapIntermediate.put(concept,tempList);
			
		}else{
			ArrayList<FetchUrl> fetchListTemp = new ArrayList<>();
			fetchListTemp.add(temp);
			fetchMapIntermediate.put(concept,fetchListTemp);
			
		}
		
	}
	Map<String,ArrayList<FetchUrl>> fetchMapBeginner = new HashMap<>();
	for(int i=0; i<fetchListBeginner.size();i++){
		FetchUrl temp = fetchListBeginner.get(i);
		String concept = fetchListBeginner.get(i).getConceptName();
		if(fetchMapBeginner.containsKey(concept)){
			ArrayList<FetchUrl> tempList = fetchMapBeginner.get(concept);
			tempList.add(temp);
			fetchMapBeginner.put(concept,tempList);
			
		}else{
			ArrayList<FetchUrl> fetchListTemp = new ArrayList<>();
			fetchListTemp.add(temp);
			fetchMapBeginner.put(concept,fetchListTemp);
			
		}
		
	}
		
		
	}
	
	
	
	
	
	}


